/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SolImport } from './routes/sol'
import { Route as EthImport } from './routes/eth'
import { Route as IndexImport } from './routes/index'

// Create Virtual Routes

const SolIndexLazyImport = createFileRoute('/sol/')()
const EthIndexLazyImport = createFileRoute('/eth/')()
const SolAsyncLazyImport = createFileRoute('/sol/async')()

// Create/Update Routes

const SolRoute = SolImport.update({
  path: '/sol',
  getParentRoute: () => rootRoute,
} as any)

const EthRoute = EthImport.update({
  path: '/eth',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const SolIndexLazyRoute = SolIndexLazyImport.update({
  path: '/',
  getParentRoute: () => SolRoute,
} as any).lazy(() => import('./routes/sol.index.lazy').then((d) => d.Route))

const EthIndexLazyRoute = EthIndexLazyImport.update({
  path: '/',
  getParentRoute: () => EthRoute,
} as any).lazy(() => import('./routes/eth.index.lazy').then((d) => d.Route))

const SolAsyncLazyRoute = SolAsyncLazyImport.update({
  path: '/async',
  getParentRoute: () => SolRoute,
} as any).lazy(() => import('./routes/sol.async.lazy').then((d) => d.Route))

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/eth': {
      id: '/eth'
      path: '/eth'
      fullPath: '/eth'
      preLoaderRoute: typeof EthImport
      parentRoute: typeof rootRoute
    }
    '/sol': {
      id: '/sol'
      path: '/sol'
      fullPath: '/sol'
      preLoaderRoute: typeof SolImport
      parentRoute: typeof rootRoute
    }
    '/sol/async': {
      id: '/sol/async'
      path: '/async'
      fullPath: '/sol/async'
      preLoaderRoute: typeof SolAsyncLazyImport
      parentRoute: typeof SolImport
    }
    '/eth/': {
      id: '/eth/'
      path: '/'
      fullPath: '/eth/'
      preLoaderRoute: typeof EthIndexLazyImport
      parentRoute: typeof EthImport
    }
    '/sol/': {
      id: '/sol/'
      path: '/'
      fullPath: '/sol/'
      preLoaderRoute: typeof SolIndexLazyImport
      parentRoute: typeof SolImport
    }
  }
}

// Create and export the route tree

interface EthRouteChildren {
  EthIndexLazyRoute: typeof EthIndexLazyRoute
}

const EthRouteChildren: EthRouteChildren = {
  EthIndexLazyRoute: EthIndexLazyRoute,
}

const EthRouteWithChildren = EthRoute._addFileChildren(EthRouteChildren)

interface SolRouteChildren {
  SolAsyncLazyRoute: typeof SolAsyncLazyRoute
  SolIndexLazyRoute: typeof SolIndexLazyRoute
}

const SolRouteChildren: SolRouteChildren = {
  SolAsyncLazyRoute: SolAsyncLazyRoute,
  SolIndexLazyRoute: SolIndexLazyRoute,
}

const SolRouteWithChildren = SolRoute._addFileChildren(SolRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/eth': typeof EthRouteWithChildren
  '/sol': typeof SolRouteWithChildren
  '/sol/async': typeof SolAsyncLazyRoute
  '/eth/': typeof EthIndexLazyRoute
  '/sol/': typeof SolIndexLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/sol/async': typeof SolAsyncLazyRoute
  '/eth': typeof EthIndexLazyRoute
  '/sol': typeof SolIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/eth': typeof EthRouteWithChildren
  '/sol': typeof SolRouteWithChildren
  '/sol/async': typeof SolAsyncLazyRoute
  '/eth/': typeof EthIndexLazyRoute
  '/sol/': typeof SolIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/eth' | '/sol' | '/sol/async' | '/eth/' | '/sol/'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/sol/async' | '/eth' | '/sol'
  id: '__root__' | '/' | '/eth' | '/sol' | '/sol/async' | '/eth/' | '/sol/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  EthRoute: typeof EthRouteWithChildren
  SolRoute: typeof SolRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  EthRoute: EthRouteWithChildren,
  SolRoute: SolRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/eth",
        "/sol"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/eth": {
      "filePath": "eth.tsx",
      "children": [
        "/eth/"
      ]
    },
    "/sol": {
      "filePath": "sol.tsx",
      "children": [
        "/sol/async",
        "/sol/"
      ]
    },
    "/sol/async": {
      "filePath": "sol.async.lazy.tsx",
      "parent": "/sol"
    },
    "/eth/": {
      "filePath": "eth.index.lazy.tsx",
      "parent": "/eth"
    },
    "/sol/": {
      "filePath": "sol.index.lazy.tsx",
      "parent": "/sol"
    }
  }
}
ROUTE_MANIFEST_END */
